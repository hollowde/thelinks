# docker-compose build
version: '3.9'
volumes:
  dbbackups:
  postgis-data:

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - 8000:8000
    env_file:
      - .env
    restart: "on-failure"
    depends_on:
      - postgres-db
    networks:
      - thelinks

  postgres-db:
    image: kartoza/postgis:15-3.3
    volumes:
      - postgis-data:/var/lib/postgresql
      - dbbackups:/backups
    environment:
      # If you need to create multiple database you can add coma separated databases eg gis,data
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASS=${POSTGRES_PASS}
      - ALLOW_IP_RANGE=0.0.0.0/0
      # Add extensions you need to be enabled by default in the DB. Default are the five specified below
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,hstore,postgis_topology,postgis_raster,pgrouting
      - RUN_AS_ROOT=true
    ports:
      - "25432:5432"
    restart: on-failure
    healthcheck:
      test: "PGPASSWORD=docker pg_isready -h 127.0.0.1 -U docker -d gis"


  dbbackups:
      image: kartoza/pg-backup:15-3.3
      hostname: pg-backups
      volumes:
        - dbbackups:/backups
      environment:
        - DUMPPREFIX=PG_db
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASS=${POSTGRES_PASS}
        - POSTGRES_PORT=${POSTGRES_PORT}
        - POSTGRES_HOST=${POSTGRES_HOST}
      restart: on-failure
      networks:
        - thelinks
      depends_on:
        postgres-db:
          condition: service_healthy

networks:
  thelinks:
    driver: bridge

